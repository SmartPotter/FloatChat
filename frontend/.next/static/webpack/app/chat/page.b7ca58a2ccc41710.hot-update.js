"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/chat/page",{

/***/ "(app-pages-browser)/./src/lib/api-client.ts":
/*!*******************************!*\
  !*** ./src/lib/api-client.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIError: function() { return /* binding */ APIError; },\n/* harmony export */   apiClient: function() { return /* binding */ apiClient; },\n/* harmony export */   checkAPIHealth: function() { return /* binding */ checkAPIHealth; },\n/* harmony export */   handleAPIError: function() { return /* binding */ handleAPIError; }\n/* harmony export */ });\n/**\r\n * API client for FloatChat backend services.\r\n * \r\n * Provides typed interfaces for all backend API endpoints with proper\r\n * error handling and response transformation.\r\n */ const API_BASE_URL = \"http://localhost:8000\" || 0;\nclass APIError extends Error {\n    constructor(message, status, response){\n        super(message);\n        this.status = status;\n        this.response = response;\n        this.name = \"APIError\";\n    }\n}\nclass APIClient {\n    async request(endpoint) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const url = \"\".concat(this.baseURL).concat(endpoint);\n        const defaultHeaders = {\n            \"Content-Type\": \"application/json\",\n            ...options.headers\n        };\n        try {\n            const response = await fetch(url, {\n                ...options,\n                headers: defaultHeaders\n            });\n            if (!response.ok) {\n                let errorMessage = \"HTTP \".concat(response.status, \": \").concat(response.statusText);\n                let errorData;\n                try {\n                    errorData = await response.json();\n                    if (errorData.detail) {\n                        errorMessage = errorData.detail;\n                    }\n                } catch (e) {\n                // Response is not JSON, use status text\n                }\n                throw new APIError(errorMessage, response.status, errorData);\n            }\n            // Handle empty responses (like 204 No Content)\n            if (response.status === 204 || response.headers.get(\"content-length\") === \"0\") {\n                return {};\n            }\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            if (error instanceof APIError) {\n                throw error;\n            }\n            // Network or other errors\n            throw new APIError(error instanceof Error ? error.message : \"Network error\", 0);\n        }\n    }\n    // Health check\n    async healthCheck() {\n        return this.request(\"/api/health\");\n    }\n    // Data summary\n    async getDataSummary() {\n        return this.request(\"/api/data-summary\");\n    }\n    // Surface timeseries data\n    async getSurfaceTimeseries(params) {\n        const searchParams = new URLSearchParams({\n            lat: params.lat.toString(),\n            lon: params.lon.toString()\n        });\n        if (params.start) searchParams.append(\"start\", params.start);\n        if (params.end) searchParams.append(\"end\", params.end);\n        if (params.depth !== undefined) searchParams.append(\"depth\", params.depth.toString());\n        return this.request(\"/api/surface-timeseries?\".concat(searchParams));\n    }\n    // Vertical profile data\n    async getVerticalProfile(params) {\n        const searchParams = new URLSearchParams({\n            lat: params.lat.toString(),\n            lon: params.lon.toString(),\n            date: params.date\n        });\n        return this.request(\"/api/vertical-profile?\".concat(searchParams));\n    }\n    // Heat content data\n    async getHeatContent(params) {\n        const searchParams = new URLSearchParams({\n            lat: params.lat.toString(),\n            lon: params.lon.toString()\n        });\n        if (params.start) searchParams.append(\"start\", params.start);\n        if (params.end) searchParams.append(\"end\", params.end);\n        return this.request(\"/api/heat-content?\".concat(searchParams));\n    }\n    // Chat interface\n    async chatWithData(request) {\n        return this.request(\"/api/chat\", {\n            method: \"POST\",\n            body: JSON.stringify(request)\n        });\n    }\n    // NetCDF ingestion (stub)\n    async ingestNetCDF() {\n        return this.request(\"/api/ingest-netcdf\", {\n            method: \"POST\"\n        });\n    }\n    constructor(baseURL = API_BASE_URL){\n        this.baseURL = baseURL;\n    }\n}\n// Export singleton instance\nconst apiClient = new APIClient();\n// Export error class for error handling in components\n\n// Utility functions for error handling\nconst handleAPIError = (error)=>{\n    if (error instanceof APIError) {\n        return error.message;\n    }\n    if (error instanceof Error) {\n        return error.message;\n    }\n    return \"An unexpected error occurred\";\n};\n// Helper function to check API availability\nconst checkAPIHealth = async ()=>{\n    try {\n        await apiClient.healthCheck();\n        return true;\n    } catch (e) {\n        return false;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api-client.ts\n"));

/***/ })

});