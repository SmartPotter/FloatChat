/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/chat/page",{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cdrv%5C%5Cdrv_codes%5C%5CFloatChat%5C%5Cfrontend%5C%5Csrc%5C%5Capp%5C%5Cchat%5C%5Cpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!":
/*!*******************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cdrv%5C%5Cdrv_codes%5C%5CFloatChat%5C%5Cfrontend%5C%5Csrc%5C%5Capp%5C%5Cchat%5C%5Cpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false! ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./src/app/chat/page.tsx */ \"(app-pages-browser)/./src/app/chat/page.tsx\", 23));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q1VzZXJzJTVDJTVDZHJ2JTVDJTVDZHJ2X2NvZGVzJTVDJTVDRmxvYXRDaGF0JTVDJTVDZnJvbnRlbmQlNUMlNUNzcmMlNUMlNUNhcHAlNUMlNUNjaGF0JTVDJTVDcGFnZS50c3glMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0Qmc2VydmVyPWZhbHNlISIsIm1hcHBpbmdzIjoiQUFBQSw4S0FBNkciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLz8wYjdlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiQzpcXFxcVXNlcnNcXFxcZHJ2XFxcXGRydl9jb2Rlc1xcXFxGbG9hdENoYXRcXFxcZnJvbnRlbmRcXFxcc3JjXFxcXGFwcFxcXFxjaGF0XFxcXHBhZ2UudHN4XCIpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cdrv%5C%5Cdrv_codes%5C%5CFloatChat%5C%5Cfrontend%5C%5Csrc%5C%5Capp%5C%5Cchat%5C%5Cpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/chat/page.tsx":
/*!*******************************!*\
  !*** ./src/app/chat/page.tsx ***!
  \*******************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// // 'use client'\n// // import { useState, useRef, useEffect } from 'react'\n// // import { Send, Bot, User, Loader2, BarChart3, MapPin, Thermometer } from 'lucide-react'\n// // import { apiClient } from '../../lib/api-client'\n// // interface Message {\n// //   id: string\n// //   content: string\n// //   sender: 'user' | 'bot'\n// //   timestamp: Date\n// // }\n// // export default function ChatPage() {\n// //   const [messages, setMessages] = useState<Message[]>([\n// //     {\n// //       id: '1',\n// //       content: \"Hello! I'm your ARGO float data assistant. I can help you explore ocean temperature, salinity, and heat content data from the Indian Ocean (2010-2013). Try asking me about temperature trends, spatial patterns, or specific measurements!\",\n// //       sender: 'bot',\n// //       timestamp: new Date()\n// //     }\n// //   ])\n// //   const [inputValue, setInputValue] = useState('')\n// //   const [isLoading, setIsLoading] = useState(false)\n// //   const messagesEndRef = useRef<HTMLDivElement>(null)\n// //   const inputRef = useRef<HTMLInputElement>(null)\n// //   useEffect(() => {\n// //     scrollToBottom()\n// //   }, [messages])\n// //   const scrollToBottom = () => {\n// //     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })\n// //   }\n// //   const handleSendMessage = async () => {\n// //     if (!inputValue.trim() || isLoading) return\n// //     const userMessage: Message = {\n// //       id: Date.now().toString(),\n// //       content: inputValue,\n// //       sender: 'user',\n// //       timestamp: new Date()\n// //     }\n// //     setMessages(prev => [...prev, userMessage])\n// //     setInputValue('')\n// //     setIsLoading(true)\n// //     try {\n// //       const response = await apiClient.chatWithData({ message: inputValue })\n// //       const botMessage: Message = {\n// //         id: (Date.now() + 1).toString(),\n// //         content: response.response,\n// //         sender: 'bot',\n// //         timestamp: new Date()\n// //       }\n// //       setMessages(prev => [...prev, botMessage])\n// //     } catch (error) {\n// //       console.error('Chat error:', error)\n// //       const errorMessage: Message = {\n// //         id: (Date.now() + 1).toString(),\n// //         content: \"I apologize, but I encountered an error processing your question. Please try again or rephrase your query.\",\n// //         sender: 'bot',\n// //         timestamp: new Date()\n// //       }\n// //       setMessages(prev => [...prev, errorMessage])\n// //     } finally {\n// //       setIsLoading(false)\n// //     }\n// //   }\n// //   const handleKeyPress = (e: React.KeyboardEvent) => {\n// //     if (e.key === 'Enter' && !e.shiftKey) {\n// //       e.preventDefault()\n// //       handleSendMessage()\n// //     }\n// //   }\n// //   const suggestedQuestions = [\n// //     \"What is the average temperature at 60°E longitude in 2012?\",\n// //     \"How does heat content vary between 60°E and 80°E?\", \n// //     \"Show me the salinity trends in the surface waters\",\n// //     \"What are the typical temperature ranges in this dataset?\"\n// //   ]\n// //   const handleSuggestionClick = (question: string) => {\n// //     setInputValue(question)\n// //     inputRef.current?.focus()\n// //   }\n// //   return (\n// //     <div className=\"min-h-screen bg-gray-50 flex flex-col\">\n// //       {/* Header */}\n// //       <header className=\"bg-white shadow-sm border-b\">\n// //         <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n// //           <div className=\"flex items-center justify-between py-6\">\n// //             <div>\n// //               <h1 className=\"text-2xl font-bold text-gray-900\">FloatChat</h1>\n// //               <p className=\"text-gray-600 mt-1\">AI assistant for ARGO float data</p>\n// //             </div>\n// //             <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n// //               <div className=\"flex items-center space-x-1\">\n// //                 <div className=\"h-2 w-2 bg-green-500 rounded-full\"></div>\n// //                 <span>Online</span>\n// //               </div>\n// //             </div>\n// //           </div>\n// //         </div>\n// //       </header>\n// //       {/* Chat Container */}\n// //       <div className=\"flex-1 flex flex-col max-w-4xl mx-auto w-full px-4 sm:px-6 lg:px-8\">\n// //         {/* Messages Area */}\n// //         <div className=\"flex-1 py-6 overflow-hidden\">\n// //           <div className=\"h-full overflow-y-auto space-y-4 pr-2\">\n// //             {messages.map((message) => (\n// //               <div\n// //                 key={message.id}\n// //                 className={`flex items-start space-x-3 ${\n// //                   message.sender === 'user' ? 'justify-end' : 'justify-start'\n// //                 }`}\n// //               >\n// //                 {message.sender === 'bot' && (\n// //                   <div className=\"flex-shrink-0\">\n// //                     <div className=\"h-8 w-8 bg-primary-100 rounded-full flex items-center justify-center\">\n// //                       <Bot className=\"h-5 w-5 text-primary-600\" />\n// //                     </div>\n// //                   </div>\n// //                 )}\n// //                 <div\n// //                   className={`max-w-2xl px-4 py-3 rounded-lg ${\n// //                     message.sender === 'user'\n// //                       ? 'bg-primary-600 text-white'\n// //                       : 'bg-white border shadow-sm'\n// //                   }`}\n// //                 >\n// //                   <p className=\"text-sm whitespace-pre-wrap\">{message.content}</p>\n// //                   <div className={`text-xs mt-2 ${\n// //                     message.sender === 'user' ? 'text-primary-100' : 'text-gray-500'\n// //                   }`}>\n// //                     {message.timestamp.toLocaleTimeString()}\n// //                   </div>\n// //                 </div>\n// //                 {message.sender === 'user' && (\n// //                   <div className=\"flex-shrink-0\">\n// //                     <div className=\"h-8 w-8 bg-gray-100 rounded-full flex items-center justify-center\">\n// //                       <User className=\"h-5 w-5 text-gray-600\" />\n// //                     </div>\n// //                   </div>\n// //                 )}\n// //               </div>\n// //             ))}\n// //             {isLoading && (\n// //               <div className=\"flex items-start space-x-3\">\n// //                 <div className=\"flex-shrink-0\">\n// //                   <div className=\"h-8 w-8 bg-primary-100 rounded-full flex items-center justify-center\">\n// //                     <Bot className=\"h-5 w-5 text-primary-600\" />\n// //                   </div>\n// //                 </div>\n// //                 <div className=\"bg-white border shadow-sm px-4 py-3 rounded-lg\">\n// //                   <div className=\"flex items-center space-x-2\">\n// //                     <Loader2 className=\"h-4 w-4 animate-spin text-primary-600\" />\n// //                     <span className=\"text-sm text-gray-600\">Analyzing data...</span>\n// //                   </div>\n// //                 </div>\n// //               </div>\n// //             )}\n// //             <div ref={messagesEndRef} />\n// //           </div>\n// //         </div>\n// //         {/* Suggested Questions */}\n// //         {messages.length === 1 && (\n// //           <div className=\"py-4 border-t bg-white rounded-t-lg\">\n// //             <h3 className=\"text-sm font-medium text-gray-700 mb-3 px-4\">Try asking about:</h3>\n// //             <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 px-4\">\n// //               {suggestedQuestions.map((question, index) => (\n// //                 <button\n// //                   key={index}\n// //                   onClick={() => handleSuggestionClick(question)}\n// //                   className=\"text-left p-3 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors duration-200 text-sm border\"\n// //                 >\n// //                   <div className=\"flex items-center space-x-2\">\n// //                     {index === 0 && <Thermometer className=\"h-4 w-4 text-orange-500\" />}\n// //                     {index === 1 && <BarChart3 className=\"h-4 w-4 text-blue-500\" />}\n// //                     {index === 2 && <MapPin className=\"h-4 w-4 text-green-500\" />}\n// //                     {index === 3 && <Bot className=\"h-4 w-4 text-purple-500\" />}\n// //                     <span className=\"text-gray-700\">{question}</span>\n// //                   </div>\n// //                 </button>\n// //               ))}\n// //             </div>\n// //           </div>\n// //         )}\n// //         {/* Input Area */}\n// //         <div className=\"py-4 bg-white border-t\">\n// //           <div className=\"flex items-center space-x-3\">\n// //             <div className=\"flex-1 relative\">\n// //               <input\n// //                 ref={inputRef}\n// //                 type=\"text\"\n// //                 value={inputValue}\n// //                 onChange={(e) => setInputValue(e.target.value)}\n// //                 onKeyPress={handleKeyPress}\n// //                 placeholder=\"Ask about ocean temperature, salinity, or heat content...\"\n// //                 className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n// //                 disabled={isLoading}\n// //               />\n// //             </div>\n// //             <button\n// //               onClick={handleSendMessage}\n// //               disabled={!inputValue.trim() || isLoading}\n// //               className=\"btn-primary p-3 disabled:opacity-50 disabled:cursor-not-allowed\"\n// //             >\n// //               <Send className=\"h-5 w-5\" />\n// //             </button>\n// //           </div>\n// //           <div className=\"mt-2 text-xs text-gray-500 px-4\">\n// //             Press Enter to send, Shift+Enter for new line\n// //           </div>\n// //         </div>\n// //       </div>\n// //     </div>\n// //   )\n// // }\n// // 'use client'\n// // import { useState, useRef, useEffect } from 'react'\n// // import { Send, Bot, User, Loader2, BarChart3, MapPin, Thermometer, Upload, HardDriveDownload, Info } from 'lucide-react'\n// // import { apiClient, APIError } from '../../lib/api-client'\n// // type Sender = 'user' | 'bot' | 'system'\n// // interface Message {\n// //   id: string\n// //   content: string\n// //   sender: Sender\n// //   timestamp: Date\n// // }\n// // export default function ChatPage() {\n// //   const [messages, setMessages] = useState<Message[]>([\n// //     {\n// //       id: 'welcome',\n// //       content:\n// //         \"Hello! I'm your ARGO data assistant. Ingest a NetCDF (e.g., tempsal.nc) to ground responses, or ask about temperature, salinity, and heat content in the Indian Ocean (2010–2013).\",\n// //       sender: 'system',\n// //       timestamp: new Date(),\n// //     },\n// //   ])\n// //   const [inputValue, setInputValue] = useState('')\n// //   const [isLoading, setIsLoading] = useState(false)\n// //   // Active dataset context from ingestion\n// //   const [datasetCtx, setDatasetCtx] = useState<Record<string, any> | null>(null)\n// //   const [pathInput, setPathInput] = useState('')\n// //   const fileInputRef = useRef<HTMLInputElement | null>(null)\n// //   const messagesEndRef = useRef<HTMLDivElement>(null)\n// //   const inputRef = useRef<HTMLInputElement>(null)\n// //   useEffect(() => {\n// //     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })\n// //   }, [messages])\n// //   const handleSendMessage = async () => {\n// //     if (!inputValue.trim() || isLoading) return\n// //     const userMessage: Message = {\n// //       id: crypto.randomUUID(),\n// //       content: inputValue,\n// //       sender: 'user',\n// //       timestamp: new Date(),\n// //     }\n// //     setMessages(prev => [...prev, userMessage])\n// //     setInputValue('')\n// //     setIsLoading(true)\n// //     try {\n// //       const resp = await apiClient.chatWithData({\n// //         message: userMessage.content,\n// //         context: datasetCtx || undefined,\n// //       })\n// //       const botMessage: Message = {\n// //         id: crypto.randomUUID(),\n// //         content: resp.response,\n// //         sender: 'bot',\n// //         timestamp: new Date(resp.timestamp || Date.now()),\n// //       }\n// //       setMessages(prev => [...prev, botMessage])\n// //     } catch (error) {\n// //       const msg =\n// //         error instanceof APIError ? error.message : 'An error occurred while processing the question.'\n// //       setMessages(prev => [\n// //         ...prev,\n// //         { id: crypto.randomUUID(), content: `Error: ${msg}`, sender: 'system', timestamp: new Date() },\n// //       ])\n// //     } finally {\n// //       setIsLoading(false)\n// //     }\n// //   }\n// //   const handleKeyPress = (e: React.KeyboardEvent) => {\n// //     if (e.key === 'Enter' && !e.shiftKey) {\n// //       e.preventDefault()\n// //       handleSendMessage()\n// //     }\n// //   }\n// //   // Ingest via upload\n// //   const onChooseFile = async (e: React.ChangeEvent<HTMLInputElement>) => {\n// //     const f = e.target.files?.[0]\n// //     if (!f) return\n// //     setMessages(prev => [\n// //       ...prev,\n// //       { id: crypto.randomUUID(), content: `Uploading ${f.name} for ingestion...`, sender: 'system', timestamp: new Date() },\n// //     ])\n// //     try {\n// //       const res = await apiClient.ingestNetcdfUpload(f)\n// //       setDatasetCtx({\n// //         parquet_path: res.output_file,\n// //         date_range: res.metadata?.date_range,\n// //         spatial_bounds: res.metadata?.spatial_bounds,\n// //         variables: res.metadata?.variables,\n// //         dims: res.metadata?.dims,\n// //       })\n// //       setMessages(prev => [\n// //         ...prev,\n// //         {\n// //           id: crypto.randomUUID(),\n// //           content: `Dataset ingested (${res.records} rows).\\nParquet: ${res.output_file}\\nTime: ${JSON.stringify(\n// //             res.metadata?.date_range\n// //           )}\\nBounds: ${JSON.stringify(res.metadata?.spatial_bounds)}`,\n// //           sender: 'system',\n// //           timestamp: new Date(),\n// //         },\n// //       ])\n// //     } catch (error) {\n// //       const msg = error instanceof APIError ? error.message : String(error)\n// //       setMessages(prev => [\n// //         ...prev,\n// //         { id: crypto.randomUUID(), content: `Ingestion failed: ${msg}`, sender: 'system', timestamp: new Date() },\n// //       ])\n// //     } finally {\n// //       if (fileInputRef.current) fileInputRef.current.value = ''\n// //     }\n// //   }\n// //   // Ingest via server-side path\n// //   const onIngestPath = async () => {\n// //     const p = pathInput.trim()\n// //     if (!p) return\n// //     setMessages(prev => [\n// //       ...prev,\n// //       { id: crypto.randomUUID(), content: `Ingesting from path: ${p}`, sender: 'system', timestamp: new Date() },\n// //     ])\n// //     try {\n// //       const res = await apiClient.ingestNetcdfByPath(p)\n// //       setDatasetCtx({\n// //         parquet_path: res.output_file,\n// //         date_range: res.metadata?.date_range,\n// //         spatial_bounds: res.metadata?.spatial_bounds,\n// //         variables: res.metadata?.variables,\n// //         dims: res.metadata?.dims,\n// //       })\n// //       setMessages(prev => [\n// //         ...prev,\n// //         {\n// //           id: crypto.randomUUID(),\n// //           content: `Dataset ingested (${res.records} rows).\\nParquet: ${res.output_file}\\nTime: ${JSON.stringify(\n// //             res.metadata?.date_range\n// //           )}\\nBounds: ${JSON.stringify(res.metadata?.spatial_bounds)}`,\n// //           sender: 'system',\n// //           timestamp: new Date(),\n// //         },\n// //       ])\n// //     } catch (error) {\n// //       const msg = error instanceof APIError ? error.message : String(error)\n// //       setMessages(prev => [\n// //         ...prev,\n// //         { id: crypto.randomUUID(), content: `Ingestion failed: ${msg}`, sender: 'system', timestamp: new Date() },\n// //       ])\n// //     }\n// //   }\n// //   const suggestedQuestions = [\n// //     'What is the average temperature at 60°E longitude in 2012?',\n// //     'How does heat content vary between 60°E and 80°E?',\n// //     'Show me the salinity trends in the surface waters',\n// //     'What are the typical temperature ranges in this dataset?',\n// //   ]\n// //   const handleSuggestionClick = (question: string) => {\n// //     setInputValue(question)\n// //     inputRef.current?.focus()\n// //   }\n// //   return (\n// //     <div className=\"min-h-screen bg-gray-50 flex flex-col\">\n// //       {/* Header */}\n// //       <header className=\"bg-white shadow-sm border-b\">\n// //         <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n// //           <div className=\"flex items-center justify-between py-6\">\n// //             <div>\n// //               <h1 className=\"text-2xl font-bold text-gray-900\">FloatChat</h1>\n// //               <p className=\"text-gray-600 mt-1\">AI assistant for ARGO float and gridded data</p>\n// //             </div>\n// //             <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n// //               <div className=\"flex items-center space-x-1\">\n// //                 <div className=\"h-2 w-2 bg-green-500 rounded-full\" />\n// //                 <span>Online</span>\n// //               </div>\n// //             </div>\n// //           </div>\n// //         </div>\n// //       </header>\n// //       {/* Body */}\n// //       <div className=\"flex-1 flex flex-col max-w-4xl mx-auto w-full px-4 sm:px-6 lg:px-8\">\n// //         {/* Ingestion Controls */}\n// //         <div className=\"mt-4 rounded-md border bg-white p-3 space-y-2\">\n// //           <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n// //             <Info size={16} /> Ingest a NetCDF to ground the chat on the active dataset.\n// //           </div>\n// //           <div className=\"flex flex-wrap items-center gap-2\">\n// //             <input ref={fileInputRef} type=\"file\" accept=\".nc\" onChange={onChooseFile} className=\"hidden\" />\n// //             <button\n// //               onClick={() => fileInputRef.current?.click()}\n// //               className=\"inline-flex items-center gap-2 rounded-md bg-blue-600 px-3 py-1.5 text-white\"\n// //             >\n// //               <Upload size={16} /> Upload .nc\n// //             </button>\n// //             <div className=\"flex items-center gap-2\">\n// //               <input\n// //                 value={pathInput}\n// //                 onChange={e => setPathInput(e.target.value)}\n// //                 placeholder=\"Server path e.g. netcdf_data/tempsal.nc\"\n// //                 className=\"w-80 rounded-md border px-2 py-1\"\n// //               />\n// //               <button\n// //                 onClick={onIngestPath}\n// //                 className=\"inline-flex items-center gap-2 rounded-md bg-slate-700 px-3 py-1.5 text-white\"\n// //               >\n// //                 <HardDriveDownload size={16} /> Ingest Path\n// //               </button>\n// //             </div>\n// //           </div>\n// //           {datasetCtx && (\n// //             <div className=\"text-xs text-gray-600\">\n// //               ActiveDataset → {datasetCtx.parquet_path} • Time {JSON.stringify(datasetCtx.date_range)} • Bounds{' '}\n// //               {JSON.stringify(datasetCtx.spatial_bounds)}\n// //             </div>\n// //           )}\n// //         </div>\n// //         {/* Messages */}\n// //         <div className=\"flex-1 py-6 overflow-hidden\">\n// //           <div className=\"h-full overflow-y-auto space-y-4 pr-2\">\n// //             {messages.map(message => (\n// //               <div\n// //                 key={message.id}\n// //                 className={`flex items-start space-x-3 ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}\n// //               >\n// //                 {message.sender !== 'user' && (\n// //                   <div className=\"flex-shrink-0\">\n// //                     <div className=\"h-8 w-8 bg-primary-100 rounded-full flex items-center justify-center\">\n// //                       <Bot className=\"h-5 w-5 text-primary-600\" />\n// //                     </div>\n// //                   </div>\n// //                 )}\n// //                 <div\n// //                   className={`max-w-2xl px-4 py-3 rounded-lg ${\n// //                     message.sender === 'user' ? 'bg-primary-600 text-white' : 'bg-white border shadow-sm'\n// //                   }`}\n// //                 >\n// //                   <p className=\"text-sm whitespace-pre-wrap\">{message.content}</p>\n// //                   <div\n// //                     className={`text-xs mt-2 ${\n// //                       message.sender === 'user' ? 'text-primary-100' : 'text-gray-500'\n// //                     }`}\n// //                   >\n// //                     {message.timestamp.toLocaleTimeString()}\n// //                   </div>\n// //                 </div>\n// //                 {message.sender === 'user' && (\n// //                   <div className=\"flex-shrink-0\">\n// //                     <div className=\"h-8 w-8 bg-gray-100 rounded-full flex items-center justify-center\">\n// //                       <User className=\"h-5 w-5 text-gray-600\" />\n// //                     </div>\n// //                   </div>\n// //                 )}\n// //               </div>\n// //             ))}\n// //             {isLoading && (\n// //               <div className=\"flex items-start space-x-3\">\n// //                 <div className=\"flex-shrink-0\">\n// //                   <div className=\"h-8 w-8 bg-primary-100 rounded-full flex items-center justify-center\">\n// //                     <Bot className=\"h-5 w-5 text-primary-600\" />\n// //                   </div>\n// //                 </div>\n// //                 <div className=\"bg-white border shadow-sm px-4 py-3 rounded-lg\">\n// //                   <div className=\"flex items-center space-x-2\">\n// //                     <Loader2 className=\"h-4 w-4 animate-spin text-primary-600\" />\n// //                     <span className=\"text-sm text-gray-600\">Analyzing data...</span>\n// //                   </div>\n// //                 </div>\n// //               </div>\n// //             )}\n// //             <div ref={messagesEndRef} />\n// //           </div>\n// //         </div>\n// //         {/* Suggested Questions */}\n// //         {messages.length <= 2 && (\n// //           <div className=\"py-4 border-t bg-white rounded-t-lg\">\n// //             <h3 className=\"text-sm font-medium text-gray-700 mb-3 px-4\">Try asking about:</h3>\n// //             <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 px-4\">\n// //               {suggestedQuestions.map((question, index) => (\n// //                 <button\n// //                   key={index}\n// //                   onClick={() => handleSuggestionClick(question)}\n// //                   className=\"text-left p-3 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors duration-200 text-sm border\"\n// //                 >\n// //                   <div className=\"flex items-center space-x-2\">\n// //                     {index === 0 && <Thermometer className=\"h-4 w-4 text-orange-500\" />}\n// //                     {index === 1 && <BarChart3 className=\"h-4 w-4 text-blue-500\" />}\n// //                     {index === 2 && <MapPin className=\"h-4 w-4 text-green-500\" />}\n// //                     {index === 3 && <Bot className=\"h-4 w-4 text-purple-500\" />}\n// //                     <span className=\"text-gray-700\">{question}</span>\n// //                   </div>\n// //                 </button>\n// //               ))}\n// //             </div>\n// //           </div>\n// //         )}\n// //         {/* Composer */}\n// //         <div className=\"py-4 bg-white border-t\">\n// //           <div className=\"flex items-center space-x-3\">\n// //             <div className=\"flex-1 relative\">\n// //               <input\n// //                 ref={inputRef}\n// //                 type=\"text\"\n// //                 value={inputValue}\n// //                 onChange={e => setInputValue(e.target.value)}\n// //                 onKeyDown={handleKeyPress}\n// //                 placeholder=\"Ask about ocean temperature, salinity, or heat content...\"\n// //                 className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n// //                 disabled={isLoading}\n// //               />\n// //             </div>\n// //             <button\n// //               onClick={handleSendMessage}\n// //               disabled={!inputValue.trim() || isLoading}\n// //               className=\"btn-primary p-3 disabled:opacity-50 disabled:cursor-not-allowed\"\n// //             >\n// //               <Send className=\"h-5 w-5\" />\n// //             </button>\n// //           </div>\n// //           <div className=\"mt-2 text-xs text-gray-500 px-4\">Press Enter to send, Shift+Enter for new line</div>\n// //         </div>\n// //       </div>\n// //     </div>\n// //   )\n// // }\n// 'use client'\n// import { useState, useRef, useEffect } from 'react'\n// import { Send, Bot, User, Loader2, BarChart3, MapPin, Thermometer, Upload, HardDriveDownload, Info } from 'lucide-react'\n// import { apiClient, APIError } from '../../lib/api-client'\n// type Sender = 'user' | 'bot' | 'system'\n// interface Message {\n//   id: string\n//   content: string\n//   sender: Sender\n//   timestamp: Date\n//   tsStr: string // preformatted, stable at creation time\n// }\n// export default function ChatPage() {\n//   const [mounted, setMounted] = useState(false)\n//   useEffect(() => setMounted(true), [])\n//   const [messages, setMessages] = useState<Message[]>([\n//     {\n//       id: 'welcome',\n//       content:\n//         \"Hello! I'm your ARGO data assistant. Ingest a NetCDF (e.g., tempsal.nc) to ground responses, or ask about temperature, salinity, and heat content in the Indian Ocean (2010–2013).\",\n//       sender: 'system',\n//       timestamp: new Date(),\n//       tsStr: new Date().toLocaleTimeString(),\n//     },\n//   ])\n//   const [inputValue, setInputValue] = useState('')\n//   const [isLoading, setIsLoading] = useState(false)\n//   // Active dataset context from ingestion\n//   const [datasetCtx, setDatasetCtx] = useState<Record<string, any> | null>(null)\n//   const [pathInput, setPathInput] = useState('')\n//   const fileInputRef = useRef<HTMLInputElement | null>(null)\n//   const messagesEndRef = useRef<HTMLDivElement>(null)\n//   const inputRef = useRef<HTMLInputElement>(null)\n//   useEffect(() => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })\n//   }, [messages])\n//   const handleSendMessage = async () => {\n//     if (!inputValue.trim() || isLoading) return\n//     const now = new Date()\n//     const userMessage: Message = {\n//       id: crypto.randomUUID(),\n//       content: inputValue,\n//       sender: 'user',\n//       timestamp: now,\n//       tsStr: now.toLocaleTimeString(),\n//     }\n//     setMessages(prev => [...prev, userMessage])\n//     setInputValue('')\n//     setIsLoading(true)\n//     try {\n//       const resp = await apiClient.chatWithData({\n//         message: userMessage.content,\n//         context: datasetCtx || undefined,\n//       })\n//       const botTs = resp.timestamp ? new Date(resp.timestamp) : new Date()\n//       const botMessage: Message = {\n//         id: crypto.randomUUID(),\n//         content: resp.response,\n//         sender: 'bot',\n//         timestamp: botTs,\n//         tsStr: botTs.toLocaleTimeString(),\n//       }\n//       setMessages(prev => [...prev, botMessage])\n//     } catch (error) {\n//       const msg = error instanceof APIError ? error.message : 'An error occurred while processing the question.'\n//       const errNow = new Date()\n//       setMessages(prev => [\n//         ...prev,\n//         { id: crypto.randomUUID(), content: `Error: ${msg}`, sender: 'system', timestamp: errNow, tsStr: errNow.toLocaleTimeString() },\n//       ])\n//     } finally {\n//       setIsLoading(false)\n//     }\n//   }\n//   const handleKeyPress = (e: React.KeyboardEvent) => {\n//     if (e.key === 'Enter' && !e.shiftKey) {\n//       e.preventDefault()\n//       handleSendMessage()\n//     }\n//   }\n//   // Ingest via upload\n//   const onChooseFile = async (e: React.ChangeEvent<HTMLInputElement>) => {\n//     const f = e.target.files?.[0]\n//     if (!f) return\n//     const now = new Date()\n//     setMessages(prev => [\n//       ...prev,\n//       { id: crypto.randomUUID(), content: `Uploading ${f.name} for ingestion...`, sender: 'system', timestamp: now, tsStr: now.toLocaleTimeString() },\n//     ])\n//     try {\n//       const res = await apiClient.ingestNetcdfUpload(f)\n//       setDatasetCtx({\n//         parquet_path: res.output_file,\n//         date_range: res.metadata?.date_range,\n//         spatial_bounds: res.metadata?.spatial_bounds,\n//         variables: res.metadata?.variables,\n//         dims: res.metadata?.dims,\n//       })\n//       const n = new Date()\n//       setMessages(prev => [\n//         ...prev,\n//         {\n//           id: crypto.randomUUID(),\n//           content: `Dataset ingested (${res.records} rows).\\nParquet: ${res.output_file}\\nTime: ${JSON.stringify(\n//             res.metadata?.date_range\n//           )}\\nBounds: ${JSON.stringify(res.metadata?.spatial_bounds)}`,\n//           sender: 'system',\n//           timestamp: n,\n//           tsStr: n.toLocaleTimeString(),\n//         },\n//       ])\n//     } catch (error) {\n//       const n = new Date()\n//       const msg = error instanceof APIError ? error.message : String(error)\n//       setMessages(prev => [\n//         ...prev,\n//         { id: crypto.randomUUID(), content: `Ingestion failed: ${msg}`, sender: 'system', timestamp: n, tsStr: n.toLocaleTimeString() },\n//       ])\n//     } finally {\n//       if (fileInputRef.current) fileInputRef.current.value = ''\n//     }\n//   }\n//   // Ingest via server-side path\n//   const onIngestPath = async () => {\n//     const p = pathInput.trim()\n//     if (!p) return\n//     const now = new Date()\n//     setMessages(prev => [\n//       ...prev,\n//       { id: crypto.randomUUID(), content: `Ingesting from path: ${p}`, sender: 'system', timestamp: now, tsStr: now.toLocaleTimeString() },\n//     ])\n//     try {\n//       const res = await apiClient.ingestNetcdfByPath(p)\n//       setDatasetCtx({\n//         parquet_path: res.output_file,\n//         date_range: res.metadata?.date_range,\n//         spatial_bounds: res.metadata?.spatial_bounds,\n//         variables: res.metadata?.variables,\n//         dims: res.metadata?.dims,\n//       })\n//       const n = new Date()\n//       setMessages(prev => [\n//         ...prev,\n//         {\n//           id: crypto.randomUUID(),\n//           content: `Dataset ingested (${res.records} rows).\\nParquet: ${res.output_file}\\nTime: ${JSON.stringify(\n//             res.metadata?.date_range\n//           )}\\nBounds: ${JSON.stringify(res.metadata?.spatial_bounds)}`,\n//           sender: 'system',\n//           timestamp: n,\n//           tsStr: n.toLocaleTimeString(),\n//         },\n//       ])\n//     } catch (error) {\n//       const n = new Date()\n//       const msg = error instanceof APIError ? error.message : String(error)\n//       setMessages(prev => [\n//         ...prev,\n//         { id: crypto.randomUUID(), content: `Ingestion failed: ${msg}`, sender: 'system', timestamp: n, tsStr: n.toLocaleTimeString() },\n//       ])\n//     }\n//   }\n//   const suggestedQuestions = [\n//     'What is the average temperature at 60°E longitude in 2012?',\n//     'How does heat content vary between 60°E and 80°E?',\n//     'Show me the salinity trends in the surface waters',\n//     'What are the typical temperature ranges in this dataset?',\n//   ]\n//   const handleSuggestionClick = (question: string) => {\n//     setInputValue(question)\n//     inputRef.current?.focus()\n//   }\n//   return (\n//     <div className=\"min-h-screen bg-gray-50 flex flex-col\">\n//       {/* Header */}\n//       <header className=\"bg-white shadow-sm border-b\">\n//         <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n//           <div className=\"flex items-center justify-between py-6\">\n//             <div>\n//               <h1 className=\"text-2xl font-bold text-gray-900\">FloatChat</h1>\n//               <p className=\"text-gray-600 mt-1\">AI assistant for ARGO float and gridded data</p>\n//             </div>\n//             <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n//               <div className=\"flex items-center space-x-1\">\n//                 <div className=\"h-2 w-2 bg-green-500 rounded-full\" />\n//                 <span>Online</span>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </header>\n//       {/* Body */}\n//       <div className=\"flex-1 flex flex-col max-w-4xl mx-auto w-full px-4 sm:px-6 lg:px-8\">\n//         {/* Ingestion Controls */}\n//         <div className=\"mt-4 rounded-md border bg-white p-3 space-y-2\">\n//           <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n//             <Info size={16} /> Ingest a NetCDF to ground the chat on the active dataset.\n//           </div>\n//           <div className=\"flex flex-wrap items-center gap-2\">\n//             <input ref={fileInputRef} type=\"file\" accept=\".nc\" onChange={onChooseFile} className=\"hidden\" />\n//             <button\n//               onClick={() => fileInputRef.current?.click()}\n//               className=\"inline-flex items-center gap-2 rounded-md bg-blue-600 px-3 py-1.5 text-white\"\n//             >\n//               <Upload size={16} /> Upload .nc\n//             </button>\n//             <div className=\"flex items-center gap-2\">\n//               <input\n//                 value={pathInput}\n//                 onChange={e => setPathInput(e.target.value)}\n//                 placeholder=\"Server path e.g. netcdf_data/tempsal.nc\"\n//                 className=\"w-80 rounded-md border px-2 py-1\"\n//               />\n//               <button\n//                 onClick={onIngestPath}\n//                 className=\"inline-flex items-center gap-2 rounded-md bg-slate-700 px-3 py-1.5 text-white\"\n//               >\n//                 <HardDriveDownload size={16} /> Ingest Path\n//               </button>\n//             </div>\n//           </div>\n//           {datasetCtx && (\n//             <div className=\"text-xs text-gray-600\">\n//               ActiveDataset → {datasetCtx.parquet_path} • Time {JSON.stringify(datasetCtx.date_range)} • Bounds{' '}\n//               {JSON.stringify(datasetCtx.spatial_bounds)}\n//             </div>\n//           )}\n//         </div>\n//         {/* Messages */}\n//         <div className=\"flex-1 py-6 overflow-hidden\">\n//           <div className=\"h-full overflow-y-auto space-y-4 pr-2\">\n//             {messages.map(message => (\n//               <div\n//                 key={message.id}\n//                 className={`flex items-start space-x-3 ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}\n//               >\n//                 {message.sender !== 'user' && (\n//                   <div className=\"flex-shrink-0\">\n//                     <div className=\"h-8 w-8 bg-primary-100 rounded-full flex items-center justify-center\">\n//                       <Bot className=\"h-5 w-5 text-primary-600\" />\n//                     </div>\n//                   </div>\n//                 )}\n//                 <div\n//                   className={`max-w-2xl px-4 py-3 rounded-lg ${\n//                     message.sender === 'user' ? 'bg-primary-600 text-white' : 'bg-white border shadow-sm'\n//                   }`}\n//                 >\n//                   <p className=\"text-sm whitespace-pre-wrap\">{message.content}</p>\n//                   <div className={`text-xs mt-2 ${message.sender === 'user' ? 'text-primary-100' : 'text-gray-500'}`}>\n//                     {/* Render only after mount to avoid SSR/CSR mismatch; use stable tsStr */}\n//                     {mounted ? message.tsStr : ''}\n//                   </div>\n//                 </div>\n//                 {message.sender === 'user' && (\n//                   <div className=\"flex-shrink-0\">\n//                     <div className=\"h-8 w-8 bg-gray-100 rounded-full flex items-center justify-center\">\n//                       <User className=\"h-5 w-5 text-gray-600\" />\n//                     </div>\n//                   </div>\n//                 )}\n//               </div>\n//             ))}\n//             {isLoading && (\n//               <div className=\"flex items-start space-x-3\">\n//                 <div className=\"flex-shrink-0\">\n//                   <div className=\"h-8 w-8 bg-primary-100 rounded-full flex items-center justify-center\">\n//                     <Bot className=\"h-5 w-5 text-primary-600\" />\n//                   </div>\n//                 </div>\n//                 <div className=\"bg-white border shadow-sm px-4 py-3 rounded-lg\">\n//                   <div className=\"flex items-center space-x-2\">\n//                     <Loader2 className=\"h-4 w-4 animate-spin text-primary-600\" />\n//                     <span className=\"text-sm text-gray-600\">Analyzing data...</span>\n//                   </div>\n//                 </div>\n//               </div>\n//             )}\n//             <div ref={messagesEndRef} />\n//           </div>\n//         </div>\n//         {/* Suggested Questions */}\n//         {messages.length <= 2 && (\n//           <div className=\"py-4 border-t bg-white rounded-t-lg\">\n//             <h3 className=\"text-sm font-medium text-gray-700 mb-3 px-4\">Try asking about:</h3>\n//             <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 px-4\">\n//               {[\n//                 'What is the average temperature at 60°E longitude in 2012?',\n//                 'How does heat content vary between 60°E and 80°E?',\n//                 'Show me the salinity trends in the surface waters',\n//                 'What are the typical temperature ranges in this dataset?',\n//               ].map((question, index) => (\n//                 <button\n//                   key={index}\n//                   onClick={() => {\n//                     setInputValue(question)\n//                     inputRef.current?.focus()\n//                   }}\n//                   className=\"text-left p-3 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors duration-200 text-sm border\"\n//                 >\n//                   <div className=\"flex items-center space-x-2\">\n//                     {index === 0 && <Thermometer className=\"h-4 w-4 text-orange-500\" />}\n//                     {index === 1 && <BarChart3 className=\"h-4 w-4 text-blue-500\" />}\n//                     {index === 2 && <MapPin className=\"h-4 w-4 text-green-500\" />}\n//                     {index === 3 && <Bot className=\"h-4 w-4 text-purple-500\" />}\n//                     <span className=\"text-gray-700\">{question}</span>\n//                   </div>\n//                 </button>\n//               ))}\n//             </div>\n//           </div>\n//         )}\n//         {/* Composer */}\n//         <div className=\"py-4 bg-white border-t\">\n//           <div className=\"flex items-center space-x-3\">\n//             <div className=\"flex-1 relative\">\n//               <input\n//                 ref={inputRef}\n//                 type=\"text\"\n//                 value={inputValue}\n//                 onChange={e => setInputValue(e.target.value)}\n//                 onKeyDown={handleKeyPress}\n//                 placeholder=\"Ask about ocean temperature, salinity, or heat content...\"\n//                 className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n//                 disabled={isLoading}\n//               />\n//             </div>\n//             <button\n//               onClick={handleSendMessage}\n//               disabled={!inputValue.trim() || isLoading}\n//               className=\"btn-primary p-3 disabled:opacity-50 disabled:cursor-not-allowed\"\n//             >\n//               <Send className=\"h-5 w-5\" />\n//             </button>\n//           </div>\n//           <div className=\"mt-2 text-xs text-gray-500 px-4\">Press Enter to send, Shift+Enter for new line</div>\n//         </div>\n//       </div>\n//     </div>\n//   )\n// }\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/chat/page.tsx\n"));

/***/ })

});