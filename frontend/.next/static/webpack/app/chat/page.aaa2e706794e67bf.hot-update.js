/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/chat/page",{

/***/ "(app-pages-browser)/./src/lib/api-client.ts":
/*!*******************************!*\
  !*** ./src/lib/api-client.ts ***!
  \*******************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// /**\n//  * API client for FloatChat backend services.\n//  * \n//  * Provides typed interfaces for all backend API endpoints with proper\n//  * error handling and response transformation.\n//  */\n// const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'\n// // Type definitions for API responses\n// export interface DataSummary {\n//   total_records: number\n//   date_range: { start: string; end: string }\n//   spatial_coverage: {\n//     latitude: { min: number; max: number }\n//     longitude: { min: number; max: number }\n//   }\n//   data_types: string[]\n//   measurement_counts: Record<string, number>\n// }\n// export interface TimeSeriesPoint {\n//   time: string\n//   temperature?: number\n//   salinity?: number\n//   depth?: number\n// }\n// export interface VerticalProfilePoint {\n//   depth: number\n//   temperature?: number\n//   salinity?: number\n//   date: string\n// }\n// export interface HeatContentPoint {\n//   time: string\n//   lat: number\n//   lon: number\n//   heat_content: number\n// }\n// export interface ChatRequest {\n//   message: string\n//   context?: Record<string, any>\n// }\n// export interface ChatResponse {\n//   response: string\n//   timestamp: string\n//   sources?: string[]\n//   confidence?: number\n// }\n// // API query parameters\n// export interface TimeSeriesParams {\n//   lat: number\n//   lon: number\n//   start?: string\n//   end?: string\n//   depth?: number\n// }\n// export interface VerticalProfileParams {\n//   lat: number\n//   lon: number\n//   date: string\n// }\n// export interface HeatContentParams {\n//   lat: number\n//   lon: number\n//   start?: string\n//   end?: string\n// }\n// class APIError extends Error {\n//   constructor(\n//     message: string,\n//     public status: number,\n//     public response?: any\n//   ) {\n//     super(message)\n//     this.name = 'APIError'\n//   }\n// }\n// class APIClient {\n//   private baseURL: string\n//   constructor(baseURL: string = API_BASE_URL) {\n//     this.baseURL = baseURL\n//   }\n//   private async request<T>(\n//     endpoint: string,\n//     options: RequestInit = {}\n//   ): Promise<T> {\n//     const url = `${this.baseURL}${endpoint}`\n//     const defaultHeaders = {\n//       'Content-Type': 'application/json',\n//       ...options.headers,\n//     }\n//     try {\n//       const response = await fetch(url, {\n//         ...options,\n//         headers: defaultHeaders,\n//       })\n//       if (!response.ok) {\n//         let errorMessage = `HTTP ${response.status}: ${response.statusText}`\n//         let errorData\n//         try {\n//           errorData = await response.json()\n//           if (errorData.detail) {\n//             errorMessage = errorData.detail\n//           }\n//         } catch {\n//           // Response is not JSON, use status text\n//         }\n//         throw new APIError(errorMessage, response.status, errorData)\n//       }\n//       // Handle empty responses (like 204 No Content)\n//       if (response.status === 204 || response.headers.get('content-length') === '0') {\n//         return {} as T\n//       }\n//       const data = await response.json()\n//       return data as T\n//     } catch (error) {\n//       if (error instanceof APIError) {\n//         throw error\n//       }\n//       // Network or other errors\n//       throw new APIError(\n//         error instanceof Error ? error.message : 'Network error',\n//         0\n//       )\n//     }\n//   }\n//   // Health check\n//   async healthCheck(): Promise<{ status: string; timestamp: string; version: string }> {\n//     return this.request('/api/health')\n//   }\n//   // Data summary\n//   async getDataSummary(): Promise<DataSummary> {\n//     return this.request('/api/data-summary')\n//   }\n//   // Surface timeseries data\n//   async getSurfaceTimeseries(params: TimeSeriesParams): Promise<TimeSeriesPoint[]> {\n//     const searchParams = new URLSearchParams({\n//       lat: params.lat.toString(),\n//       lon: params.lon.toString(),\n//     })\n//     if (params.start) searchParams.append('start', params.start)\n//     if (params.end) searchParams.append('end', params.end)\n//     if (params.depth !== undefined) searchParams.append('depth', params.depth.toString())\n//     return this.request(`/api/surface-timeseries?${searchParams}`)\n//   }\n//   // Vertical profile data\n//   async getVerticalProfile(params: VerticalProfileParams): Promise<VerticalProfilePoint[]> {\n//     const searchParams = new URLSearchParams({\n//       lat: params.lat.toString(),\n//       lon: params.lon.toString(),\n//       date: params.date,\n//     })\n//     return this.request(`/api/vertical-profile?${searchParams}`)\n//   }\n//   // Heat content data\n//   async getHeatContent(params: HeatContentParams): Promise<HeatContentPoint[]> {\n//     const searchParams = new URLSearchParams({\n//       lat: params.lat.toString(),\n//       lon: params.lon.toString(),\n//     })\n//     if (params.start) searchParams.append('start', params.start)\n//     if (params.end) searchParams.append('end', params.end)\n//     return this.request(`/api/heat-content?${searchParams}`)\n//   }\n//   // Chat interface\n//   async chatWithData(request: ChatRequest): Promise<ChatResponse> {\n//     return this.request('/api/chat', {\n//       method: 'POST',\n//       body: JSON.stringify(request),\n//     })\n//   }\n//   // NetCDF ingestion (stub)\n//   async ingestNetCDF(): Promise<{ status: string; message: string }> {\n//     return this.request('/api/ingest-netcdf', {\n//       method: 'POST',\n//     })\n//   }\n// }\n// // Export singleton instance\n// export const apiClient = new APIClient()\n// // Export error class for error handling in components\n// export { APIError }\n// // Utility functions for error handling\n// export const handleAPIError = (error: unknown): string => {\n//   if (error instanceof APIError) {\n//     return error.message\n//   }\n//   if (error instanceof Error) {\n//     return error.message\n//   }\n//   return 'An unexpected error occurred'\n// }\n// // Helper function to check API availability\n// export const checkAPIHealth = async (): Promise<boolean> => {\n//   try {\n//     await apiClient.healthCheck()\n//     return true\n//   } catch {\n//     return false\n//   }\n// }\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api-client.ts\n"));

/***/ })

});